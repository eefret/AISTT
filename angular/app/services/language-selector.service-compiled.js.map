{"version":3,"sources":["language-selector.service.js"],"names":[],"mappings":"AAAA,QACK,MADL,CACY,KADZ,EAEK,OAFL,CAEa,mBAFb,EAEkC,gBAFlC;;AAIA,SAAS,gBAAT,CAA0B,KAA1B,EAAiC,OAAjC,EAA0C,EAA1C,EAA8C;AAC1C,WAAO;AACH,+BAAuB,UAAU,WAAV,EAAuB,gBAAvB,EAAyC;AAC5D,wBAAY,cAAc,gBAAd,CADgD;AAE5D,gBAAI,WAAW,GAAG,KAAH,EAAX,CAFwD;AAG5D,kBAAM,GAAN,CAAU,6BAAV,EAAyC,OAAzC,CAAiD,UAAU,IAAV,EAAgB;AAC7D,oBAAI,gBAAgB,KAAK,CAAL,CAAhB,CADyD;AAE7D,oBAAI,gBAAgB,KAAK,CAAL,CAAhB,CAFyD;AAG7D,oBAAI,YAAY,EAAZ,CAHyD;AAI7D,oBAAI,KAAK,QAAQ,IAAR,CAAL,CAJyD;AAK7D,oBAAI,OAAO,GAAG,WAAH,CAAe,SAAf,EAA0B,OAA1B,CAAkC,UAAU,IAAV,EAAgB;AACzD,wBAAI,KAAK,UAAL,CAAgB,SAAhB,CAAJ,EAAgC;AAC5B,4BAAI,UAAU,EAAV,CADwB;AAE5B,uCAAe,KAAK,KAAL,CAAW,SAAX,EAAsB,CAAtB,CAAf,CAF4B;AAG5B,6CAAqB,aAAa,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAArB,CAH4B;AAI5B,4BAAI,aAAa,KAAb,CAAmB,GAAnB,EAAwB,MAAxB,GAAiC,CAAjC,EAAoC;AACpC,gCAAI,oBAAoB,aAAa,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAApB,CADgC;AAEpC,gDAAoB,kBAAkB,OAAlB,CAA0B,GAA1B,EAA+B,EAA/B,CAApB,CAFoC;AAGpC,oCAAQ,GAAR,CAAY,iBAAZ,EAHoC;AAIpC,sCAAU,QAAQ,QAAR,EAAkB,cAAc,SAAd,EAAyB,EAAC,MAAM,iBAAN,EAA5C,EAAsE,CAAtE,CAAV,CAJoC;AAKpC,gCAAI,OAAJ,EAAa;AACT,0CAAU,QAAQ,IAAR,CADD;6BAAb;yBALJ;AASA,4BAAI,WAAW,QAAQ,QAAR,EAAkB,cAAc,SAAd,EAAyB,EAAC,MAAK,kBAAL,EAA5C,EAAsE,CAAtE,CAAX,CAbwB;AAc5B,4BAAI,QAAJ,EAAc;AACV,sCAAU,IAAV,CAAe,EAAC,QAAO,SAAS,IAAT,EAAe,QAAO,YAAP,EAAqB,WAAW,OAAX,EAAoB,UAAU,mBAAiB,IAAjB,GAAsB,cAAtB,EAAzF,EADU;yBAAd;qBAdJ;iBADyC,CAAzC,CALyD;AAyB7D,wBAAQ,GAAR,CAAY,SAAZ,EAzB6D;AA0B7D,yBAAS,OAAT,CAAiB,SAAjB,EA1B6D;aAAhB,CAAjD,CAH4D;AA+B5D,mBAAO,SAAS,OAAT,CA/BqD;SAAzC;KAD3B,CAD0C;CAA9C","file":"language-selector.service-compiled.js","sourcesContent":["angular\n    .module('app')\n    .factory('language-selector', languageSelector);\n\nfunction languageSelector($http, $filter, $q) {\n    return {\n        getAvailableLanguages: function (projectPath, translationsRoot) {\n            resFolder = projectPath + translationsRoot;\n            var deferred = $q.defer();\n            $http.get('content/assets/countries.js').success(function (data) {\n                var countriesData = data[0];\n                var languagesData = data[1];\n                var languages = [];\n                var fs = require('fs');\n                var file = fs.readdirSync(resFolder).forEach(function (file) {\n                    if (file.startsWith('values-')) {\n                        var country = '';\n                        languageCode = file.split('values-')[1];\n                        languageCodePrefix = languageCode.split('-')[0];\n                        if (languageCode.split('-').length > 1) {\n                            var languageCodeSufix = languageCode.split('-')[1];\n                            languageCodeSufix = languageCodeSufix.replace('r', '');\n                            console.log(languageCodeSufix);\n                            country = $filter('filter')(countriesData.countries, {code: languageCodeSufix})[0];\n                            if (country) {\n                                country = country.name;\n                            }\n                        }\n                        var language = $filter('filter')(languagesData.languages, {code:languageCodePrefix})[0];\n                        if (language) {\n                            languages.push({'name':language.name, 'code':languageCode, 'country': country, fileName: translationsRoot+file+'/strings.xml'});\n                        }\n                    }\n                });\n                console.log(languages);\n                deferred.resolve(languages);\n            });\n            return deferred.promise;\n        }\n    }\n}"]}